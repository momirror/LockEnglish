package com.example.msp.greendao.entity.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.msp.greendao.entity.greendao.CET4Entity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CET4_ENTITY".
*/
public class CET4EntityDao extends AbstractDao<CET4Entity, Void> {

    public static final String TABLENAME = "CET4_ENTITY";

    /**
     * Properties of entity CET4Entity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Word = new Property(0, String.class, "word", false, "WORD");
        public final static Property English = new Property(1, String.class, "english", false, "ENGLISH");
        public final static Property China = new Property(2, String.class, "china", false, "CHINA");
        public final static Property Sign = new Property(3, String.class, "sign", false, "SIGN");
    };


    public CET4EntityDao(DaoConfig config) {
        super(config);
    }
    
    public CET4EntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CET4_ENTITY\" (" + //
                "\"WORD\" TEXT," + // 0: word
                "\"ENGLISH\" TEXT," + // 1: english
                "\"CHINA\" TEXT," + // 2: china
                "\"SIGN\" TEXT);"); // 3: sign
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CET4_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CET4Entity entity) {
        stmt.clearBindings();
 
        String word = entity.getWord();
        if (word != null) {
            stmt.bindString(1, word);
        }
 
        String english = entity.getEnglish();
        if (english != null) {
            stmt.bindString(2, english);
        }
 
        String china = entity.getChina();
        if (china != null) {
            stmt.bindString(3, china);
        }
 
        String sign = entity.getSign();
        if (sign != null) {
            stmt.bindString(4, sign);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public CET4Entity readEntity(Cursor cursor, int offset) {
        CET4Entity entity = new CET4Entity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // word
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // english
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // china
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // sign
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CET4Entity entity, int offset) {
        entity.setWord(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setEnglish(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setChina(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSign(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(CET4Entity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(CET4Entity entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
